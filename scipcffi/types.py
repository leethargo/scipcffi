from collections import namedtuple

from scipcffi.ffi import lib


class SCIPException(Exception):
    pass


def make_enum(items):
    class Enum(namedtuple('enum', items)):
        pass
    return Enum._make(items)


ReturnCode = make_enum([
    'SCIP_OKAY',
    'SCIP_ERROR',
    'SCIP_NOMEMORY',
    'SCIP_READERROR',
    'SCIP_WRITEERROR',
    'SCIP_NOFILE',
    'SCIP_FILECREATEERROR',
    'SCIP_LPERROR',
    'SCIP_NOPROBLEM',
    'SCIP_INVALIDCALL',
    'SCIP_INVALIDDATA',
    'SCIP_INVALIDRESULT',
    'SCIP_PLUGINNOTFOUND',
    'SCIP_PARAMETERUNKNOWN',
    'SCIP_PARAMETERWRONGTYPE',
    'SCIP_PARAMETERWRONGVAL',
    'SCIP_KEYALREADYEXISTING',
    'SCIP_MAXDEPTHLEVEL',
    'SCIP_BRANCHERROR',
])

ReturnCode.from_scip = {
    lib.SCIP_OKAY: ReturnCode.SCIP_OKAY,
    lib.SCIP_ERROR: ReturnCode.SCIP_ERROR,
    lib.SCIP_NOMEMORY: ReturnCode.SCIP_NOMEMORY,
    lib.SCIP_READERROR: ReturnCode.SCIP_READERROR,
    lib.SCIP_WRITEERROR: ReturnCode.SCIP_WRITEERROR,
    lib.SCIP_NOFILE: ReturnCode.SCIP_NOFILE,
    lib.SCIP_FILECREATEERROR: ReturnCode.SCIP_FILECREATEERROR,
    lib.SCIP_LPERROR: ReturnCode.SCIP_LPERROR,
    lib.SCIP_NOPROBLEM: ReturnCode.SCIP_NOPROBLEM,
    lib.SCIP_INVALIDCALL: ReturnCode.SCIP_INVALIDCALL,
    lib.SCIP_INVALIDDATA: ReturnCode.SCIP_INVALIDDATA,
    lib.SCIP_INVALIDRESULT: ReturnCode.SCIP_INVALIDRESULT,
    lib.SCIP_PLUGINNOTFOUND: ReturnCode.SCIP_PLUGINNOTFOUND,
    lib.SCIP_PARAMETERUNKNOWN: ReturnCode.SCIP_PARAMETERUNKNOWN,
    lib.SCIP_PARAMETERWRONGTYPE: ReturnCode.SCIP_PARAMETERWRONGTYPE,
    lib.SCIP_PARAMETERWRONGVAL: ReturnCode.SCIP_PARAMETERWRONGVAL,
    lib.SCIP_KEYALREADYEXISTING: ReturnCode.SCIP_KEYALREADYEXISTING,
    lib.SCIP_MAXDEPTHLEVEL: ReturnCode.SCIP_MAXDEPTHLEVEL,
    lib.SCIP_BRANCHERROR: ReturnCode.SCIP_BRANCHERROR,
}


Status = make_enum([
    'UNKNOWN',
    'USERINTERRUPT',
    'NODELIMIT',
    'TOTALNODELIMIT',
    'STALLNODELIMIT',
    'TIMELIMIT',
    'MEMLIMIT',
    'GAPLIMIT',
    'SOLLIMIT',
    'BESTSOLLIMIT',
    'OPTIMAL',
    'INFEASIBLE',
    'UNBOUNDED',
    'INFORUNBD',
])


VarType = make_enum([
    'BINARY',
    'INTEGER',
    'IMPLINT',
    'CONTINUOUS',
])

VarType.to_scip = {
    VarType.BINARY: lib.SCIP_VARTYPE_BINARY,
    VarType.INTEGER: lib.SCIP_VARTYPE_INTEGER,
    VarType.IMPLINT: lib.SCIP_VARTYPE_IMPLINT,
    VarType.CONTINUOUS: lib.SCIP_VARTYPE_CONTINUOUS,
}
